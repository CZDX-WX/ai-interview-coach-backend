<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.czdxwx.aiinterviewcoachbackend.mapper.QuestionMapper">

    <resultMap id="QuestionVOMap" type="com.czdxwx.aiinterviewcoachbackend.vo.QuestionVO">
        <id property="id" column="id"/>
        <result property="questionText" column="question_text"/>
        <result property="referenceAnswer" column="reference_answer"/>
        <result property="speechSynthesisContent" column="speech_synthesis_content"/>
        <result property="difficulty" column="difficulty"/>
        <result property="ownerId" column="owner_id"/>
        <result property="questionHash" column="question_hash"/>
        <result property="createdAt" column="created_at"/>
        <result property="speechAudioUrl" column="speech_audio_url"/>
        <result property="proficiencyStatus" column="proficiency_status"/>
        <result property="isBookmarked" column="is_bookmarked"/>
        <result property="tags" column="tags" typeHandler="com.czdxwx.aiinterviewcoachbackend.config.mybatis.StringToListTypeHandler"/>
    </resultMap>

    <sql id="searchWhereClause">
        <where>
            <choose>
                <when test="request.userId != null">(q.owner_id IS NULL OR q.owner_id = #{request.userId})</when>
                <otherwise>q.owner_id IS NULL</otherwise>
            </choose>

            <if test="request.practiceStatus != null and request.practiceStatus != 'ALL'">
                <choose>
                    <when test="request.practiceStatus == 'NOT_PRACTICED'">
                        AND (
                        NOT EXISTS (
                        SELECT 1 FROM user_question_status uqs
                        WHERE uqs.question_id = q.id AND uqs.user_id = #{request.userId}
                        )
                        OR
                        EXISTS (
                        SELECT 1 FROM user_question_status uqs
                        WHERE uqs.question_id = q.id AND uqs.user_id = #{request.userId} AND uqs.proficiency_status = 'NOT_PRACTICED'
                        )
                        )
                    </when>
                    <when test="request.practiceStatus == 'BOOKMARKED'">
                        AND uqs_filter.is_bookmarked = TRUE
                    </when>
                    <otherwise> AND uqs_filter.proficiency_status = #{request.practiceStatus}
                    </otherwise>
                </choose>
            </if>

            <if test="request.roleId != null">
                AND rt_filter.role_id = #{request.roleId}
            </if>

            <if test="request.difficulty != null and request.difficulty != ''">
                AND q.difficulty = #{request.difficulty}
            </if>
        </where>
    </sql>

    <select id="searchQuestionIds" resultType="java.lang.Long">
        SELECT DISTINCT q.id
        FROM questions q
        <if test="request.practiceStatus != null and request.practiceStatus != 'ALL' and request.practiceStatus != 'NOT_PRACTICED'">
            JOIN user_question_status uqs_filter ON q.id = uqs_filter.question_id AND uqs_filter.user_id = #{request.userId}
        </if>
        <if test="request.isBookmarked == true">
            <if test="request.practiceStatus == null or request.practiceStatus == 'ALL' or request.practiceStatus == 'NOT_PRACTICED'">
                JOIN user_question_status uqs_filter ON q.id = uqs_filter.question_id AND uqs_filter.user_id = #{request.userId}
            </if>
        </if>
        <if test="request.roleId != null or (request.tagNames != null and !request.tagNames.isEmpty())">
            JOIN question_tags qt_filter ON q.id = qt_filter.question_id
            JOIN tags t_filter ON qt_filter.tag_id = t_filter.id
        </if>
        <if test="request.roleId != null">
            JOIN role_tags rt_filter ON t_filter.id = rt_filter.tag_id
        </if>

        <include refid="searchWhereClause"/>

        <if test="request.tagNames != null and !request.tagNames.isEmpty()">
            AND t_filter.name IN
            <foreach item="item" collection="request.tagNames" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        ORDER BY q.id DESC
    </select>

    <select id="findAllQuestionIdsByAllTags" resultType="java.lang.Long">
        SELECT q.id
        FROM questions q
        JOIN question_tags qt_filter ON q.id = qt_filter.question_id
        JOIN tags t_filter ON qt_filter.tag_id = t_filter.id
        <if test="request.practiceStatus != null and request.practiceStatus != 'ALL' and request.practiceStatus != 'NOT_PRACTICED'">
            JOIN user_question_status uqs_filter ON q.id = uqs_filter.question_id AND uqs_filter.user_id = #{request.userId}
        </if>
        <if test="request.isBookmarked == true">
            <if test="request.practiceStatus == null or request.practiceStatus == 'ALL' or request.practiceStatus == 'NOT_PRACTICED'">
                JOIN user_question_status uqs_filter ON q.id = uqs_filter.question_id AND uqs_filter.user_id = #{request.userId}
            </if>
        </if>
        <if test="request.roleId != null">
            JOIN role_tags rt_filter ON t_filter.id = rt_filter.tag_id
        </if>

        <include refid="searchWhereClause"/>

        <if test="request.tagNames != null and !request.tagNames.isEmpty()">
            AND t_filter.name IN
            <foreach item="item" collection="request.tagNames" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        GROUP BY q.id
        <if test="request.tagNames != null and !request.tagNames.isEmpty()">
            HAVING COUNT(DISTINCT t_filter.id) = ${request.tagNames.size()}
        </if>
        ORDER BY q.id DESC
    </select>

    <select id="findVosByIds" resultMap="QuestionVOMap">
        SELECT
        q.id, q.question_text, q.reference_answer, q.speech_synthesis_content, q.difficulty,
        q.owner_id, q.question_hash, q.created_at, q.speech_audio_url,
        uqs.proficiency_status,
        uqs.is_bookmarked,
        GROUP_CONCAT(t.name SEPARATOR ',') AS tags
        FROM
        questions q
        LEFT JOIN
        question_tags qt ON q.id = qt.question_id
        LEFT JOIN
        tags t ON qt.tag_id = t.id
        LEFT JOIN
        user_question_status uqs ON q.id = uqs.question_id AND uqs.user_id = #{userId}
        WHERE
        q.id IN
        <foreach item="item" collection="ids" open="(" separator="," close=")">
            #{item}
        </foreach>
        GROUP BY
        q.id, uqs.proficiency_status, uqs.is_bookmarked
        ORDER BY FIELD(q.id,
        <foreach item="item" collection="ids" separator=",">
            #{item}
        </foreach>
        )
    </select>

    <select id="findPageWithTags" resultMap="QuestionVOMap">
            SELECT
            q.id, q.question_text, q.reference_answer, q.speech_synthesis_content, q.difficulty, q.owner_id, q.question_hash, q.created_at, q.speech_audio_url,
            GROUP_CONCAT(t.name SEPARATOR ',') AS tags
            FROM
            questions q
            LEFT JOIN
            question_tags qt ON q.id = qt.question_id
            LEFT JOIN
            tags t ON qt.tag_id = t.id
            <if test="ew != null and ew.customSqlSegment != null and ew.customSqlSegment != ''">
                ${ew.customSqlSegment}
            </if>
            GROUP BY
            q.id

    </select>

    <select id="findPageByTagNameWithTags" resultMap="QuestionVOMap">
        SELECT
            q.id, q.question_text, q.reference_answer, q.speech_synthesis_content, q.difficulty, q.owner_id, q.question_hash, q.created_at, q.speech_audio_url,
            GROUP_CONCAT(t_join.name SEPARATOR ',') AS tags
        FROM
            questions q
                JOIN
            question_tags qt_filter ON q.id = qt_filter.question_id
                JOIN
            tags t_filter ON qt_filter.tag_id = t_filter.id
                LEFT JOIN
            question_tags qt_join ON q.id = qt_join.question_id
                LEFT JOIN
            tags t_join ON qt_join.tag_id = t_join.id
        WHERE
            t_filter.name = #{tagName}
        GROUP BY
            q.id
    </select>

    <select id="findUnpracticedPublicQuestions" resultMap="QuestionVOMap">
        SELECT
            q.id, q.question_text, q.reference_answer, q.speech_synthesis_content, q.difficulty, q.owner_id, q.question_hash, q.created_at, q.speech_audio_url,
            GROUP_CONCAT(t.name SEPARATOR ',') AS tags
        FROM
            questions q
                LEFT JOIN
            user_question_status uqs ON q.id = uqs.question_id AND uqs.user_id = #{userId}
                LEFT JOIN
            question_tags qt ON q.id = qt.question_id
                LEFT JOIN
            tags t ON qt.tag_id = t.id
        WHERE
            q.owner_id IS NULL AND uqs.id IS NULL
        GROUP BY
            q.id
    </select>


    <select id="countVisibleQuestions" resultType="java.lang.Long">
        SELECT COUNT(id) FROM questions
        <where>
            <if test="userId != null">
                owner_id IS NULL OR owner_id = #{userId}
            </if>
            <if test="userId == null">
                owner_id IS NULL
            </if>
        </where>
    </select>


</mapper>